import java.util.*;

////////////////////////////////////////////////////////////////////////
// TASK 1: Read a message and display each word on a new line
class Task1 {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        String message = sc.nextLine();
        String[] words = message.split(" ");

        for (String word : words) {
            System.out.println(word);
        }

        System.out.println("The message is: " + message);
        sc.close();
    }
}







////////////////////////////////////////////////////////////////////////
// TASK 2: Display types of variables
public class Task2 {
    public static void main(String[] args) {
        int integerVar = 10;
        float floatVar = 10.5f;
        double doubleVar = 20.5;
        char charVar = 'A';
        String stringVar = "Hello";
        boolean booleanVar = true;

        System.out.println("Integer: " + integerVar);
        System.out.println("Float: " + floatVar);
        System.out.println("Double: " + doubleVar);
        System.out.println("Char: " + charVar);
        System.out.println("String: " + stringVar);
        System.out.println("Boolean: " + booleanVar);
    }
}







//////////////////////////////////////////////////////////////////////////////////
// TASK 3: Data types and their sizes
public class Task3 {
    public static void main(String[] args) {
        System.out.println("Size of int: " + Integer.BYTES + " bytes");
        System.out.println("Size of float: " + Float.BYTES + " bytes");
        System.out.println("Size of double: " + Double.BYTES + " bytes");
        System.out.println("Size of char: " + Character.BYTES + " bytes");
        System.out.println("Size of boolean: " + Byte.BYTES + " bytes");
    }
}






//////////////////////////////////////////////////////////////////////////////////
// TASK 4: Arithmetic operations
public class Task4 {
    public static void main(String[] args) {
        int a = 10, b = 20;
        System.out.println("Addition: " + (a + b));
        System.out.println("Subtraction: " + (a - b));
        System.out.println("Multiplication: " + (a * b));
        System.out.println("Division: " + (a / b));
        System.out.println("Modulus: " + (a % b));
    }
}





//////////////////////////////////////////////////////////////////////////////////
// TASK 5: Unary operators
public class Task5 {
    public static void main(String[] args) {
        int x = 10;
        System.out.println("Unary plus: " + (+x));
        System.out.println("Unary minus: " + (-x));
        System.out.println("Increment: " + (++x));
        System.out.println("Decrement: " + (--x));
    }
}






//////////////////////////////////////////////////////////////////////////////////
// TASK 6: Assignment operators
public class Task6 {
    public static void main(String[] args) {
        int y = 10;
        y += 5;
        System.out.println("y += 5: " + y);
        y -= 5;
        System.out.println("y -= 5: " + y);
        y *= 5;
        System.out.println("y *= 5: " + y);
        y /= 5;
        System.out.println("y /= 5: " + y);
        y %= 5;
        System.out.println("y %= 5: " + y);
    }
}





//////////////////////////////////////////////////////////////////////////////////
// TASK 7: Relational operators
public class Task7 {
    public static void main(String[] args) {
        int a = 10, b = 5;
        System.out.println("a == b: " + (a == b));
        System.out.println("a != b: " + (a != b));
        System.out.println("a > b: " + (a > b));
        System.out.println("a < b: " + (a < b));
        System.out.println("a >= b: " + (a >= b));
        System.out.println("a <= b: " + (a <= b));
    }
}








//////////////////////////////////////////////////////////////////////////////////
// TASK 8: Logical operators
public class Task8 {
    public static void main(String[] args) {
        boolean p = true, q = false;
        System.out.println("p && q: " + (p && q));
        System.out.println("p || q: " + (p || q));
        System.out.println("!p: " + (!p));
    }
}








//////////////////////////////////////////////////////////////////////////////////
// TASK 9: Ternary operator
public class Task9 {
    public static void main(String[] args) {
        int a = 10, b = 5;
        int result = (a > b) ? a : b;
        System.out.println("Ternary operator result: " + result);
    }
}






//////////////////////////////////////////////////////////////////////////////////
// TASK 10: Bitwise operators
public class Task10 {
    public static void main(String[] args) {
        int m = 5, n = 3;
        System.out.println("m & n: " + (m & n));
        System.out.println("m | n: " + (m | n));
        System.out.println("m ^ n: " + (m ^ n));
        System.out.println("~m: " + (~m));
        System.out.println("m << 1: " + (m << 1));
        System.out.println("m >> 1: " + (m >> 1));
        System.out.println("m >>> 1: " + (m >>> 1));
    }
}







//////////////////////////////////////////////////////////////////////////////////
// 11. Write a java program to intitialize the object by using reference
// variable and display the values of the object.
class ReferenceObject {
    String name;
    int age;

    public static void main(String[] args) {

        ReferenceObject obj = new ReferenceObject();

        obj.name = "Avinash Yadav";
        obj.age = 21;

        System.out.println("Name: " + obj.name + "\nAge: " + obj.age);
    }
}







//////////////////////////////////////////////////////////////////////////////////
// 12. Write a java program to intitialize the object by using method & display
class MethodObject {
    String name;
    int age;

    void insert(String n, int a) {
        name = n;
        age = a;
    }

    void display() {
        System.out.println("Name: " + name + "\nAge: " + age);
    }

    public static void main(String[] args) {
        MethodObject obj = new MethodObject();

        obj.insert("Avinash Yadav", 21);

        obj.display();
    }
}







//////////////////////////////////////////////////////////////////////////////////
// 13) Write a java program by using Default constructor
class DefaultConstructor {
    DefaultConstructor() {
        System.out.println("Default Constructor Envoked.");
    }

    void display() {
        System.out.println("Default Constructor Creation Successful.");
    }

    public static void main(String[] args) {
        DefaultConstructor obj = new DefaultConstructor();

        obj.display();
    }

}











//////////////////////////////////////////////////////////////////////////////////
// 14) Write a java program by using Parameterised constructor
class ParameterizedConstructor {
    String name;
    int id;

    ParameterizedConstructor(String name, int id) {
        this.name = name;
        this.id = id;
    }

    void display() {
        System.out.println("Name: " + name + "\nID: " + id);
    }

    public static void main(String[] args) {
        ParameterizedConstructor obj = new ParameterizedConstructor("Avinash", 21);

        obj.display();
    }
}












//////////////////////////////////////////////////////////////////////////////////
// 15) Write a java program by using Constructor Overloading
class ConstructorOverloading {
    int a, b;

    ConstructorOverloading() {
        a = 0;
        b = 0;
    }

    ConstructorOverloading(int x) {
        a = x;
        b = 0;
    }

    ConstructorOverloading(int x, int y) {
        a = x;
        b = y;
    }

    void display() {
        System.out.println("a = " + a + " b = " + b);
    }

    public static void main(String[] args) {
        ConstructorOverloading obj1 = new ConstructorOverloading();
        ConstructorOverloading obj2 = new ConstructorOverloading(10);
        ConstructorOverloading obj3 = new ConstructorOverloading(20, 30);

        obj1.display();
        obj2.display();
        obj3.display();
    }

}









//////////////////////////////////////////////////////////////////////////////////
// 16) Write a java program by using static keyword
class StaticVariable {

    static int a = 10;
    static int b;

    static void display() {
        System.out.println("a = " + a + " b = " + b);
    }

    public static void main(String[] args) {
        display();
    }

}










//////////////////////////////////////////////////////////////////////////////////
// 17) Write a java program by using this keyword
class ThisKeyword {
    int a;
    int b;

    ThisKeyword(int a, int b) {
        this.a = a;
        this.b = b;
    }

    void display() {
        System.out.println("a = " + a + " b = " + b);
    }

    public static void main(String[] args) {
        ThisKeyword obj = new ThisKeyword(10, 20);

        obj.display();
    }
}








///////////////////////////////////////////////////////////////////////////////////////////
// 18) Write a java program to print reverse strings by using commandline arguments.
class ReverseString {
    public static void main(String args[]) {
        if (args.length != 1) {
            System.out.println("Invalid Input");
            return;
        }
        String str = args[0];
        String rev = "";
        for (int i = str.length() - 1; i >= 0; i--) {
            rev += str.charAt(i);
        }
        System.out.println("Reverse of " + str + " is " + rev);

    }

}












//////////////////////////////////////////////////////////////////////////////////
// 19) Write a java program to print reverse numbers by using commandline arguments
class ReverseNumber {
    public static void main(String[] args) {
        if (args.length == 0) {
            System.out.println("Please provide a list of numbers to reverse.");
            return;
        }

        for (int i = args.length - 1; i >= 0; i--) {
            System.out.print(args[i] + " ");
        }
    }
}









//////////////////////////////////////////////////////////////////////////////////
// 20) Write a java program to print findout the largest number using commandline arguments
class LargestNumber {
    public static void main(String[] args) {
        if (args.length != 3) {
            System.out.println("Please enter 3 numbers");
            return;
        }

        int a = Integer.parseInt(args[0]);
        int b = Integer.parseInt(args[1]);
        int c = Integer.parseInt(args[2]);

        if (a > b && a > c) {
            System.out.println(a + " is the largest number");
        } else if (b > a && b > c) {
            System.out.println(b + " is the largest number");
        } else {
            System.out.println(c + " is the largest number");
        }

    }

}










//////////////////////////////////////////////////////////////////////////////////
// 21) Write a java program to implement anonymous object.
class AnonymousObject {

    void display() {
        System.out.println("Avinash Yadav");
    }

    public static void main(String[] args) {
        new AnonymousObject().display();
    }

}










//////////////////////////////////////////////////////////////////////////////////
// 22) Write a java program to implement nulling the reference
class NullingReference {
    public static void main(String[] args) {
        String str = "Avinash Yadav";
        System.out.println(str);

        str = null;

        System.out.println(str);
    }

}










//////////////////////////////////////////////////////////////////////////////////
// 23) Write a java program to implement assigning a reference to another.
class AssigningReference {
    public static void main(String[] args) {
        int[] arr1 = { 1, 2, 3, 4, 5 };
        int[] arr2 = arr1;

        arr2[0] = 100;

        System.out.println(arr1[0]);
    }

}









//////////////////////////////////////////////////////////////////////////////////
// 24) Write a java program to implement single-level inheritance
class Parent {
    void display() {
        System.out.println("Parent class");
    }
}

class Child extends Parent {
    void output() {
        System.out.println("Child class");
    }
}

class SingleInheritance {
    public static void main(String[] args) {
        System.out.println("Single Inheritance");
        Child obj = new Child();
        obj.display();
        obj.output();
    }

}







//////////////////////////////////////////////////////////////////////////////////
// 25) Write a java program to implement Multilevel-level inheritance
class A {
    void display() {
        System.out.println("Class A");
    }
}

class B extends A {
    void show() {
        System.out.println("Class B");
    }
}

class C extends B {
    void output() {
        System.out.println("Class C");
    }
}

class MultilevelInheritance {
    public static void main(String[] args) {
        C obj = new C();
        obj.display();
        obj.show();
        obj.output();
    }
}










//////////////////////////////////////////////////////////////////////////////////
// 26) Write a java program to implement Multiple-level inheritance
// First Interface
interface Vehicle {
    void start();
}

// Second Interface
interface Engine {
    void power();
}

// Class implementing multiple interfaces
class Car implements Vehicle, Engine {
    public void start() {
        System.out.println("Car is starting...");
    }

    public void power() {
        System.out.println("Engine is providing power...");
    }
}

// Main class
public class MultipleInheritance {
    public static void main(String[] args) {
        Car myCar = new Car();

        // Calling methods from both interfaces
        myCar.start(); // From Vehicle interface
        myCar.power(); // From Engine interface
    }
}








//////////////////////////////////////////////////////////////////////////////////
// 27) Write a java program to implement heirarcal-level inheritance
// Parent class
class Animal {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

// Child class 1
class Dog extends Animal {
    void bark() {
        System.out.println("The dog barks.");
    }
}

// Child class 2
class Cat extends Animal {
    void meow() {
        System.out.println("The cat meows.");
    }
}

// Main class
public class HierarchicalInheritance {
    public static void main(String[] args) {
        Dog myDog = new Dog();
        Cat myCat = new Cat();

        // Dog can access methods from Animal
        myDog.eat(); // From Animal class
        myDog.bark(); // From Dog class

        // Cat can access methods from Animal
        myCat.eat(); // From Animal class
        myCat.meow(); // From Cat class
    }
}









//////////////////////////////////////////////////////////////////////////////////
// 28) Write a java program to implement Hybrid-level inheritance
// Base class (Parent)
class Animal2 {
    void eat() {
        System.out.println("This animal eats food.");
    }
}

// Intermediate class (Multilevel Inheritance)
class Mammal extends Animal2 {
    void giveBirth() {
        System.out.println("This mammal gives birth to live young ones.");
    }
}

// Another child class (Hierarchical Inheritance)
class Bird extends Animal2 {
    void layEggs() {
        System.out.println("Birds lay eggs.");
    }
}

// Interface (for Multiple Inheritance)
interface Flyable {
    void fly();
}

// Derived class combining Multilevel, Hierarchical, and Multiple Inheritance
class Bat extends Mammal implements Flyable {
    public void fly() {
        System.out.println("A bat can fly.");
    }
}

// Main class
public class HybridInheritance {
    public static void main(String[] args) {
        Bat myBat = new Bat();

        // Calling methods from different levels of inheritance
        myBat.eat(); // From Animal2 class
        myBat.giveBirth(); // From Mammal class
        myBat.fly(); // From Flyable interface

        Bird myBird = new Bird();
        myBird.eat(); // From Animal2 class
        myBird.layEggs(); // From Bird class
    }
}










//////////////////////////////////////////////////////////////////////////////////
// 29) Write a java program to implement that Consider a scenario where
// Bank is a class that provides functionality to get the rate of
// interest. However, the rate of interest varies according to banks.
// For example, SBI, ICICI and AXIS banks could provide 8%, 7%,& 9% rate of
////////////////////////////////////////////////////////////////////////////////// interest.
class Bank {
    double getRateOfInterest() {
        return 0;
    }
}

class SBI extends Bank {
    double getRateOfInterest() {
        return 8.0;
    }
}

class ICICI extends Bank {
    double getRateOfInterest() {
        return 7.0;
    }
}

class AXIS extends Bank {
    double getRateOfInterest() {
        return 9.0;
    }
}

public class BankDemo {
    public static void main(String[] args) {
        Bank sbi = new SBI();
        Bank icici = new ICICI();
        Bank axis = new AXIS();

        System.out.println("SBI Rate of Interest: " + sbi.getRateOfInterest() + "%");
        System.out.println("ICICI Rate of Interest: " + icici.getRateOfInterest() + "%");
        System.out.println("AXIS Rate of Interest: " + axis.getRateOfInterest() + "%");
    }
}











//////////////////////////////////////////////////////////////////////////////////
// 30) Write a java program to implement add method by passing two
// integers, three integers, two double values.
class Adder {
    int add(int a, int b) {
        return a + b;
    }

    int add(int a, int b, int c) {
        return a + b + c;
    }

    double add(double a, double b) {
        return a + b;
    }
}

class AddDemo {
    public static void main(String[] args) {
        Adder adder = new Adder();

        System.out.println("Add 2 ints: " + adder.add(5, 10));
        System.out.println("Add 3 ints: " + adder.add(1, 2, 3));
        System.out.println("Add 2 doubles: " + adder.add(3.5, 2.5));
    }
}











//////////////////////////////////////////////////////////////////////////////////
// 31) Write a Java Program simulates a University System using Person is the
// base class, Student inherits from Person, GraduateStudent inherits from
// Student, final keyword is used in inheritance, super keyword is used
// to call superclass constructors / methods, Command line arguments are
// used to take input, String operations are performed on student details.
class Person {
    String name;
    int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    void display() {
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
    }
}

class Student extends Person {
    String studentId;

    Student(String name, int age, String studentId) {
        super(name, age);
        this.studentId = studentId;
    }

    void display() {
        super.display();
        System.out.println("Student ID: " + studentId);
    }
}

final class GraduateStudent extends Student {
    String degree;

    GraduateStudent(String name, int age, String studentId, String degree) {
        super(name, age, studentId);
        this.degree = degree;
    }

    void display() {
        super.display();
        System.out.println("Degree Title: " + degree);
    }
}

public class UniversitySystem {
    public static void main(String[] args) {
        if (args.length < 4) {
            System.out.println("Please provide name, age, studentId, and degree as command line arguments.");
            return;
        }

        String name = args[0];
        int age = Integer.parseInt(args[1]);
        String studentId = args[2];
        String degree = args[3];

        GraduateStudent gradStudent = new GraduateStudent(name, age, studentId, degree);
        gradStudent.display();
    }
}












//////////////////////////////////////////////////////////////////////////////////
// 32) Write a Java Program to create an Employee base class with attributes
// like name, id, and salary, extend FullTimeEmployee and PartTimeEmployee
// from Employee, Override calculateSalary() method to handle different
// salary calculations, implement a main method to simulate salary generation.
class Employee {
    String name;
    int id;
    double salary;

    Employee(String name, int id, double salary) {
        this.name = name;
        this.id = id;
        this.salary = salary;
    }

    double calculateSalary() {
        return salary;
    }

    void display() {
        System.out.println("Name: " + name);
        System.out.println("ID: " + id);
        System.out.println("Salary: " + calculateSalary());
    }
}

class FullTimeEmployee extends Employee {
    FullTimeEmployee(String name, int id, double salary) {
        super(name, id, salary);
    }

    double calculateSalary() {
        return salary;
    }
}

class PartTimeEmployee extends Employee {
    int hoursWorked;
    double hourlyRate;

    PartTimeEmployee(String name, int id, int hoursWorked, double hourlyRate) {
        super(name, id, hoursWorked * hourlyRate);
        this.hoursWorked = hoursWorked;
        this.hourlyRate = hourlyRate;
    }

    double calculateSalary() {
        return hoursWorked * hourlyRate;
    }
}

public class EmployeeSystem {
    public static void main(String[] args) {
        FullTimeEmployee fullTime = new FullTimeEmployee("Avinash Yadav", 123, 50000);
        PartTimeEmployee partTime = new PartTimeEmployee("Satyendra", 321, 2000, 25);

        fullTime.display();
        partTime.display();
    }
}













//////////////////////////////////////////////////////////////////////////////////
// 33) Write a Java Program to create an interface RentalService with a method
// calculateRent(), implement Car and Bike classes that provide specific
// rent calculations, use polymorphism to calculate the total rent based
// on the selected vehicletype, implement a main method to simulate vehicle booking.
interface RentalService {
    double calculateRent();
}

class Car implements RentalService {
    double dailyRate;
    int days;

    Car(double dailyRate, int days) {
        this.dailyRate = dailyRate;
        this.days = days;
    }

    public double calculateRent() {
        return dailyRate * days;
    }
}

class Bike implements RentalService {
    double hourlyRate;
    int hours;

    Bike(double hourlyRate, int hours) {
        this.hourlyRate = hourlyRate;
        this.hours = hours;
    }

    public double calculateRent() {
        return hourlyRate * hours;
    }
}

public class RentalServiceSystem {
    public static void main(String[] args) {
        RentalService vehicle1 = new Car(50, 3);
        RentalService vehicle2 = new Bike(10, 5);

        double totalRent = vehicle1.calculateRent() + vehicle2.calculateRent();

        System.out.println("Car Rent: " + vehicle1.calculateRent());
        System.out.println("Bike Rent: " + vehicle2.calculateRent());

        System.out.println("Total Rent: " + totalRent);
    }
}











//////////////////////////////////////////////////////////////////////////////////
// 34) Write a Java Program to create an abstract class BankA/c with methods
// deposit(), withdraw() & getBalance(),create SavingsA/c &CurrentA/c
// classes that extend BankAccount, implement polymorphism: override
// withdraw() to enforce a minimum balance for savings accounts,create
// a main method to simulate bank transactions.
abstract class BankAccount {
    double balance;

    BankAccount(double balance) {
        this.balance = balance;
    }

    abstract void deposit(double amount);

    abstract void withdraw(double amount);

    double getBalance() {
        return balance;
    }
}

class SavingsAccount extends BankAccount {
    double minimumBalance;

    SavingsAccount(double balance, double minimumBalance) {
        super(balance);
        this.minimumBalance = minimumBalance;
    }

    void deposit(double amount) {
        balance += amount;
    }

    void withdraw(double amount) {
        if (balance - amount >= minimumBalance) {
            balance -= amount;
        } else {
            System.out.println("Cannot withdraw. Minimum balance requirement not met.");
        }
    }
}

class CurrentAccount extends BankAccount {
    CurrentAccount(double balance) {
        super(balance);
    }

    void deposit(double amount) {
        balance += amount;
    }

    void withdraw(double amount) {
        balance -= amount;
    }
}

public class BankSystem {
    public static void main(String[] args) {
        SavingsAccount savings = new SavingsAccount(1000, 500);
        CurrentAccount current = new CurrentAccount(2000);

        savings.deposit(200);
        savings.withdraw(300);
        current.deposit(500);
        current.withdraw(1000);

        System.out.println("Savings Account Balance: " + savings.getBalance());
        System.out.println("Current Account Balance: " + current.getBalance());
    }
}











//////////////////////////////////////////////////////////////////////////////////
// 35) Write a Java Program to create a Product class with attributes like
// name, price, and category extend the Product class to Electronics,
// Clothing, and Books classes, implement a Cart class that allows users to
// add or remove products, implement a main method to simulate the shopping process.
class Product {
    String name;
    double price;
    String category;

    Product(String name, double price, String category) {
        this.name = name;
        this.price = price;
        this.category = category;
    }

    void display() {
        System.out.println("Name: " + name);
        System.out.println("Price: " + price);
        System.out.println("Category: " + category);
    }
}

class Electronics extends Product {
    Electronics(String name, double price) {
        super(name, price, "Electronics");
    }
}

class Clothing extends Product {
    Clothing(String name, double price) {
        super(name, price, "Clothing");
    }
}

class Books extends Product {
    Books(String name, double price) {
        super(name, price, "Books");
    }
}

class Cart {
    Product[] products = new Product[10];
    int count = 0;

    void addProduct(Product product) {
        if (count < products.length) {
            products[count++] = product;
        } else {
            System.out.println("Cart is full!");
        }
    }

    void removeProduct(Product product) {
        for (int i = 0; i < count; i++) {
            if (products[i].equals(product)) {
                products[i] = products[--count];
                products[count] = null;
                break;
            }
        }
    }

    void displayCart() {
        for (int i = 0; i < count; i++) {
            products[i].display();
            System.out.println();
        }
    }
}

public class ShoppingSystem {
    public static void main(String[] args) {
        Cart cart = new Cart();

        Product laptop = new Electronics("Laptop", 1000);
        Product shirt = new Clothing("Shirt", 50);
        Product book = new Books("Java Programming", 30);

        cart.addProduct(laptop);
        cart.addProduct(shirt);
        cart.addProduct(book);

        cart.displayCart();
    }
}

//////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////